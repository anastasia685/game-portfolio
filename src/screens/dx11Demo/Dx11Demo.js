import Container from '../../web-components/container/Container'
import Timelapse from '../../assets/videos/waves_timelapse.mp4'
import Snap1 from '../../assets/images/waves_snap1.png'
import Snap2 from '../../assets/images/waves_snap2.png'

import classes from '../ProjectScreen.module.scss'

const Dx11Demo = () => {
	return (
		<Container className={classes.content}>
			<h1>Real-Time Water Surface & Environment Rendering</h1>
			<div className={classes.mediaContainer}>
				<div>
					<video src={Timelapse} autoPlay={true} loop={true} muted={true}></video>
				</div>
				<div className={classes.imageColumn}>
					<div><img src={Snap1} alt={'snapshot 1'}/></div>
					<div><img src={Snap2} alt={'snapshot 2'}/></div>
				</div>
			</div>
			<p>
				My first graphics programming project showcases a GPU-driven water surface with procedural displacement,
				reflections, different light types, shadow mapping and a configurable environment including sky and fog.
				Designed as an all-in-one demo, it aims to demonstrate core real-time graphics techniques in one simple scene.
			</p>
			<h3>List of features:</h3>
			<ul className={classes.listMain}>
				<li>
					<span>Water Surface Rendering:</span>
					<ul>
						<li>
							A tessellated grid plane whose density adapts based on camera distance;
							displacement values sampled from a structured buffer generated by a compute shader.
						</li>
						<li>
							Fractional Brownian Motion (fBm) used for wave generation, with
							exponential sine noise as the base wave function and
							domain warping to modulate each octaveâ€™s phase.
						</li>
						<li>
							Planar reflections using mirrored camera placement.
						</li>
					</ul>
				</li>
				<li>
					<span>Shading & Lighting:</span>
					<ul>
						<li>
							Blinn-Phong base lighting model extended with subsurface scattering approximation
							and Schlick Fresnel term for angle-dependent reflections.
						</li>
						<li>
							Support for all three major light types: directional, point, and spot.
						</li>
						<li>All include shadow mapping with PCF filtering.</li>
					</ul>
				</li>
				<li>
					<span>Post-Processing:</span>
					<ul>
						<li>
							Bloom: two-octave effect with downsampling and Gaussian blur kernel.
						</li>
						<li>
							Fog: distance- and height-based attenuation using reconstructed world-space position.
						</li>
					</ul>
				</li>
			</ul>
			<p>
				The source code for the project can be found <a href={'https://github.com/anastasia685/Waves'} target={'_blank'}>here</a>.
			</p>
		</Container>
	)
}

export default Dx11Demo
