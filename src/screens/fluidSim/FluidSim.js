import Container from '../../web-components/container/Container'
import Timelapse from '../../assets/videos/fluidsim_timelapse.mp4'
import Snap1 from '../../assets/images/fluidsim_snap1.png'
import Snap2 from '../../assets/images/fluidsim_snap2.png'

import classes from '../ProjectScreen.module.scss'

const FluidSim = () => {
	return (
		<Container className={classes.content}>
			<h1>Procedural Terrain & Fluid-Simulated Volumetric Clouds</h1>
			<div className={classes.mediaContainer}>
				<div>
					<video src={Timelapse} autoPlay={true} loop={true} muted={true}></video>
				</div>
				<div style={{display: 'flex', flexDirection: 'column'}}>
					<div style={{display: 'flex'}}>
						<div><img src={Snap1} alt={'snapshot 1'}/></div>
						<div><img src={Snap2} alt={'snapshot 2'}/></div>
					</div>
					<div style={{display: 'flex'}}>
						<iframe src={'https://www.youtube.com/embed/2toTSXp2wXQ?si=8lDyWkgMX6lIsAXs'}/>
					</div>
				</div>
			</div>
			<p>
				This project combines procedural terrain generation with volumetric cloud rendering driven by
				computer fluid dynamics implemented with GPU compute shaders.
				The focus was on created a fully dynamic, field-based simulation using Navier-Stokes equations
				to model cloud flow, and using ray marching techniques to render them with realistic lighting and scattering.
				An important feature was to have the simulation interact with the underlying procedurally generated fBm terrain via voxelized SDFs.
			</p>
			<h3>List of features:</h3>
			<ul className={classes.listMain}>
				<li>
					<span>Fluid Simulation (Navier-Stokes):</span>
					<ul>
						<li>
							Implemented entirely in compute shaders using a MAC grid for improved numerical stability.
						</li>
						<li>
							Semi-Lagrangian advection for both velocity and density fields.
						</li>
						<li>
							Force injection using layered fractal Perlin noise and gravity.
						</li>
						<li>
							Vorticity confinement to preserve swirling motions lost to numerical dissipation.
						</li>
						<li>
							Free-slip boundary conditions using a scene-wide Signed Distance Field, so clouds slide over the terrain.
						</li>
						<li>
							Divergence-free projection via the Jacobi iterative solver to enforce incompressibility.
						</li>
					</ul>
				</li>
				<li>
					<span>Volumetric Cloud Rendering:</span>
					<ul>
						<li>
							Ray marching through a 3D density field generated by the fluid simulation.
						</li>
						<li>
							Single scattering computed using Beerâ€™s Law for out-scattering and light transmittance.
						</li>
						<li>
							Henyey-Greenstein phase function to model anisotropic scattering.
						</li>
						<li>
							Worley noise layered into density sampling for billowy structure.
						</li>
					</ul>
				</li>
				<li>
					<span>Procedural Terrain System:</span>
					<ul>
						<li>
							Generated using gradient-aware fractal Perlin noise where each octave's contribution is biased by the current slope,
							meaning steep slopes reduce higher-frequency detail.
						</li>
						<li>
							Dynamic, distance-based tessellation.
						</li>
						<li>
							Computation of analytical normals and texture blending by altitude.
						</li>
					</ul>
				</li>
				<li>
					<span>
						Post-processing:
					</span>
					<ul>
						<li>
							Screen-space God rays (crepuscular scattering) using light occlusion map.
						</li>
						<li>
							HDR rendering with ACES tone mapping.
						</li>
					</ul>
				</li>
				<li>
					<span>Collision detection:</span>
					<ul>
						<li>
							Unified SDF generated on GPU for marking boundaries for fluid simulator
							is also sampled on CPU for player movement and ground collision.
						</li>
					</ul>
				</li>
			</ul>
			<p>
				The source code for the project can be found <a href={'https://github.com/anastasia685/VolumetricFluidSim'} target={'_blank'}>here</a>.
			</p>
		</Container>
	)
}

export default FluidSim
